/**
 * // ðŸš€ Auto-generated by Orval
 * // ðŸ”„ Do not edit manually - regenerate with: pnpm generate-types
 * 
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  AuthToken,
  HTTPValidationError,
  HealthCheck,
  LoginRequest,
  Project,
  ProjectCreate,
  ProjectList,
  User
} from './vantageAPI.schemas';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Root
 */
export type GetRootResponse200 = {
  data: ApiResponse
  status: 200
}
    
export type GetRootResponseComposite = GetRootResponse200;
    
export type GetRootResponse = GetRootResponseComposite & {
  headers: Headers;
}

export const getGetRootUrl = () => {


  

  return `http://localhost:8000/`
}

export const GetRoot = async ( options?: RequestInit): Promise<GetRootResponse> => {
  
  const res = await fetch(getGetRootUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRootResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetRootResponse
}



export const getGetRootQueryKey = () => {
    return [`http://localhost:8000/`] as const;
    }

    
export const getGetRootQueryOptions = <TData = Awaited<ReturnType<typeof GetRoot>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRootQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetRoot>>> = ({ signal }) => GetRoot({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRootQueryResult = NonNullable<Awaited<ReturnType<typeof GetRoot>>>
export type GetRootQueryError = unknown


/**
 * @summary Root
 */

export function useGetRoot<TData = Awaited<ReturnType<typeof GetRoot>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRootQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Health Check
 */
export type GetHealthCheckResponse200 = {
  data: HealthCheck
  status: 200
}
    
export type GetHealthCheckResponseComposite = GetHealthCheckResponse200;
    
export type GetHealthCheckResponse = GetHealthCheckResponseComposite & {
  headers: Headers;
}

export const getGetHealthCheckUrl = () => {


  

  return `http://localhost:8000/health`
}

export const GetHealthCheck = async ( options?: RequestInit): Promise<GetHealthCheckResponse> => {
  
  const res = await fetch(getGetHealthCheckUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetHealthCheckResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetHealthCheckResponse
}



export const getGetHealthCheckQueryKey = () => {
    return [`http://localhost:8000/health`] as const;
    }

    
export const getGetHealthCheckQueryOptions = <TData = Awaited<ReturnType<typeof GetHealthCheck>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetHealthCheck>>> = ({ signal }) => GetHealthCheck({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData> & { queryKey: QueryKey }
}

export type GetHealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof GetHealthCheck>>>
export type GetHealthCheckQueryError = unknown


/**
 * @summary Health Check
 */

export function useGetHealthCheck<TData = Awaited<ReturnType<typeof GetHealthCheck>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetHealthCheckQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Hello
 */
export type GetHelloResponse200 = {
  data: ApiResponse
  status: 200
}
    
export type GetHelloResponseComposite = GetHelloResponse200;
    
export type GetHelloResponse = GetHelloResponseComposite & {
  headers: Headers;
}

export const getGetHelloUrl = () => {


  

  return `http://localhost:8000/api/hello`
}

export const GetHello = async ( options?: RequestInit): Promise<GetHelloResponse> => {
  
  const res = await fetch(getGetHelloUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetHelloResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetHelloResponse
}



export const getGetHelloQueryKey = () => {
    return [`http://localhost:8000/api/hello`] as const;
    }

    
export const getGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof GetHello>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetHello>>> = ({ signal }) => GetHello({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData> & { queryKey: QueryKey }
}

export type GetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof GetHello>>>
export type GetHelloQueryError = unknown


/**
 * @summary Hello
 */

export function useGetHello<TData = Awaited<ReturnType<typeof GetHello>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetHelloQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Current User
 */
export type GetCurrentUserResponse200 = {
  data: User
  status: 200
}
    
export type GetCurrentUserResponseComposite = GetCurrentUserResponse200;
    
export type GetCurrentUserResponse = GetCurrentUserResponseComposite & {
  headers: Headers;
}

export const getGetCurrentUserUrl = () => {


  

  return `http://localhost:8000/api/users/me`
}

export const GetCurrentUser = async ( options?: RequestInit): Promise<GetCurrentUserResponse> => {
  
  const res = await fetch(getGetCurrentUserUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetCurrentUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetCurrentUserResponse
}



export const getGetCurrentUserQueryKey = () => {
    return [`http://localhost:8000/api/users/me`] as const;
    }

    
export const getGetCurrentUserQueryOptions = <TData = Awaited<ReturnType<typeof GetCurrentUser>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetCurrentUser>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetCurrentUser>>> = ({ signal }) => GetCurrentUser({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetCurrentUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof GetCurrentUser>>>
export type GetCurrentUserQueryError = unknown


/**
 * @summary Get Current User
 */

export function useGetCurrentUser<TData = Awaited<ReturnType<typeof GetCurrentUser>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetCurrentUser>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCurrentUserQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Login
 */
export type LoginResponse200 = {
  data: AuthToken
  status: 200
}

export type LoginResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type LoginResponseComposite = LoginResponse200 | LoginResponse422;
    
export type LoginResponse = LoginResponseComposite & {
  headers: Headers;
}

export const getLoginUrl = () => {


  

  return `http://localhost:8000/api/auth/login`
}

export const Login = async (loginRequest: LoginRequest, options?: RequestInit): Promise<LoginResponse> => {
  
  const res = await fetch(getLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: LoginResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as LoginResponse
}




export const getLoginMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Login>>, TError,{data: LoginRequest}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof Login>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['login'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Login>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  Login(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof Login>>>
    export type LoginMutationBody = LoginRequest
    export type LoginMutationError = HTTPValidationError

    /**
 * @summary Login
 */
export const useLogin = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Login>>, TError,{data: LoginRequest}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Login>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Logout
 */
export type LogoutResponse200 = {
  data: ApiResponse
  status: 200
}
    
export type LogoutResponseComposite = LogoutResponse200;
    
export type LogoutResponse = LogoutResponseComposite & {
  headers: Headers;
}

export const getLogoutUrl = () => {


  

  return `http://localhost:8000/api/auth/logout`
}

export const Logout = async ( options?: RequestInit): Promise<LogoutResponse> => {
  
  const res = await fetch(getLogoutUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: LogoutResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as LogoutResponse
}




export const getLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Logout>>, TError,void, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof Logout>>, TError,void, TContext> => {

const mutationKey = ['logout'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Logout>>, void> = () => {
          

          return  Logout(fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof Logout>>>
    
    export type LogoutMutationError = unknown

    /**
 * @summary Logout
 */
export const useLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Logout>>, TError,void, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Logout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
/**
 * @summary Get Projects
 */
export type GetProjectsResponse200 = {
  data: ProjectList
  status: 200
}
    
export type GetProjectsResponseComposite = GetProjectsResponse200;
    
export type GetProjectsResponse = GetProjectsResponseComposite & {
  headers: Headers;
}

export const getGetProjectsUrl = () => {


  

  return `http://localhost:8000/api/projects`
}

export const GetProjects = async ( options?: RequestInit): Promise<GetProjectsResponse> => {
  
  const res = await fetch(getGetProjectsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetProjectsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetProjectsResponse
}



export const getGetProjectsQueryKey = () => {
    return [`http://localhost:8000/api/projects`] as const;
    }

    
export const getGetProjectsQueryOptions = <TData = Awaited<ReturnType<typeof GetProjects>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetProjects>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetProjects>>> = ({ signal }) => GetProjects({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetProjects>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectsQueryResult = NonNullable<Awaited<ReturnType<typeof GetProjects>>>
export type GetProjectsQueryError = unknown


/**
 * @summary Get Projects
 */

export function useGetProjects<TData = Awaited<ReturnType<typeof GetProjects>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetProjects>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create Project
 */
export type CreateProjectResponse200 = {
  data: Project
  status: 200
}

export type CreateProjectResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type CreateProjectResponseComposite = CreateProjectResponse200 | CreateProjectResponse422;
    
export type CreateProjectResponse = CreateProjectResponseComposite & {
  headers: Headers;
}

export const getCreateProjectUrl = () => {


  

  return `http://localhost:8000/api/projects`
}

export const CreateProject = async (projectCreate: ProjectCreate, options?: RequestInit): Promise<CreateProjectResponse> => {
  
  const res = await fetch(getCreateProjectUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateProjectResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as CreateProjectResponse
}




export const getCreateProjectMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof CreateProject>>, TError,{data: ProjectCreate}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof CreateProject>>, TError,{data: ProjectCreate}, TContext> => {

const mutationKey = ['createProject'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof CreateProject>>, {data: ProjectCreate}> = (props) => {
          const {data} = props ?? {};

          return  CreateProject(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProjectMutationResult = NonNullable<Awaited<ReturnType<typeof CreateProject>>>
    export type CreateProjectMutationBody = ProjectCreate
    export type CreateProjectMutationError = HTTPValidationError

    /**
 * @summary Create Project
 */
export const useCreateProject = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof CreateProject>>, TError,{data: ProjectCreate}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof CreateProject>>,
        TError,
        {data: ProjectCreate},
        TContext
      > => {

      const mutationOptions = getCreateProjectMutationOptions(options);

      return useMutation(mutationOptions );
    }
    
