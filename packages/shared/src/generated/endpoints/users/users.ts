/**
 * // üöÄ Auto-generated by Orval (Tag-Split Mode)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * 
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  User
} from '../../schemas';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Get Current User
 */
export type GetCurrentUserResponse200 = {
  data: User
  status: 200
}
    
export type GetCurrentUserResponseComposite = GetCurrentUserResponse200;
    
export type GetCurrentUserResponse = GetCurrentUserResponseComposite & {
  headers: Headers;
}

export const getGetCurrentUserUrl = () => {


  

  return `http://localhost:8000/api/users/me`
}

export const GetCurrentUser = async ( options?: RequestInit): Promise<GetCurrentUserResponse> => {
  
  const res = await fetch(getGetCurrentUserUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetCurrentUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetCurrentUserResponse
}



export const getGetCurrentUserQueryKey = () => {
    return [`http://localhost:8000/api/users/me`] as const;
    }

    
export const getGetCurrentUserQueryOptions = <TData = Awaited<ReturnType<typeof GetCurrentUser>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetCurrentUser>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetCurrentUser>>> = ({ signal }) => GetCurrentUser({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetCurrentUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof GetCurrentUser>>>
export type GetCurrentUserQueryError = unknown


/**
 * @summary Get Current User
 */

export function useGetCurrentUser<TData = Awaited<ReturnType<typeof GetCurrentUser>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetCurrentUser>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCurrentUserQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



