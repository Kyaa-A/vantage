/**
 * // üöÄ Auto-generated by Orval (Tag-Split Mode)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * 
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  Project,
  ProjectCreate,
  ProjectList
} from '../../schemas';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Get Projects
 */
export type GetProjectsResponse200 = {
  data: ProjectList
  status: 200
}
    
export type GetProjectsResponseComposite = GetProjectsResponse200;
    
export type GetProjectsResponse = GetProjectsResponseComposite & {
  headers: Headers;
}

export const getGetProjectsUrl = () => {


  

  return `http://localhost:8000/api/projects`
}

export const GetProjects = async ( options?: RequestInit): Promise<GetProjectsResponse> => {
  
  const res = await fetch(getGetProjectsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetProjectsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetProjectsResponse
}



export const getGetProjectsQueryKey = () => {
    return [`http://localhost:8000/api/projects`] as const;
    }

    
export const getGetProjectsQueryOptions = <TData = Awaited<ReturnType<typeof GetProjects>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetProjects>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetProjects>>> = ({ signal }) => GetProjects({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetProjects>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectsQueryResult = NonNullable<Awaited<ReturnType<typeof GetProjects>>>
export type GetProjectsQueryError = unknown


/**
 * @summary Get Projects
 */

export function useGetProjects<TData = Awaited<ReturnType<typeof GetProjects>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetProjects>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Project
 */
export type CreateProjectResponse200 = {
  data: Project
  status: 200
}

export type CreateProjectResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type CreateProjectResponseComposite = CreateProjectResponse200 | CreateProjectResponse422;
    
export type CreateProjectResponse = CreateProjectResponseComposite & {
  headers: Headers;
}

export const getCreateProjectUrl = () => {


  

  return `http://localhost:8000/api/projects`
}

export const CreateProject = async (projectCreate: ProjectCreate, options?: RequestInit): Promise<CreateProjectResponse> => {
  
  const res = await fetch(getCreateProjectUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      projectCreate,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: CreateProjectResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as CreateProjectResponse
}




export const getCreateProjectMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof CreateProject>>, TError,{data: ProjectCreate}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof CreateProject>>, TError,{data: ProjectCreate}, TContext> => {

const mutationKey = ['createProject'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof CreateProject>>, {data: ProjectCreate}> = (props) => {
          const {data} = props ?? {};

          return  CreateProject(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProjectMutationResult = NonNullable<Awaited<ReturnType<typeof CreateProject>>>
    export type CreateProjectMutationBody = ProjectCreate
    export type CreateProjectMutationError = HTTPValidationError

    /**
 * @summary Create Project
 */
export const useCreateProject = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof CreateProject>>, TError,{data: ProjectCreate}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof CreateProject>>,
        TError,
        {data: ProjectCreate},
        TContext
      > => {

      const mutationOptions = getCreateProjectMutationOptions(options);

      return useMutation(mutationOptions );
    }
    