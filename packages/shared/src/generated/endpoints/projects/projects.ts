/**
 * // üöÄ Auto-generated by Orval (Axios + React Query)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * // üîê Uses custom Axios instance with auth & error handling
 * 
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  Project,
  ProjectCreate,
  ProjectList
} from '../../schemas';

import { mutator } from '../../../../../../apps/web/src/lib/api';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Get list of projects for the current user.

In production, this will:
1. Extract user ID from JWT token
2. Query projects owned by or shared with the user
3. Apply pagination and filtering
 * @summary Get Projects
 */
export const Get_projects_api_v1_projects__get = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<ProjectList>(
      {url: `http://localhost:8000/api/v1/projects/`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProjectsApiV1ProjectsGetQueryKey = () => {
    return [`http://localhost:8000/api/v1/projects/`] as const;
    }

    
export const getGetProjectsApiV1ProjectsGetQueryOptions = <TData = Awaited<ReturnType<typeof Get_projects_api_v1_projects__get>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_projects_api_v1_projects__get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectsApiV1ProjectsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof Get_projects_api_v1_projects__get>>> = ({ signal }) => Get_projects_api_v1_projects__get(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof Get_projects_api_v1_projects__get>>, TError, TData> & { queryKey: QueryKey }
}

export type GetProjectsApiV1ProjectsGetQueryResult = NonNullable<Awaited<ReturnType<typeof Get_projects_api_v1_projects__get>>>
export type GetProjectsApiV1ProjectsGetQueryError = unknown


/**
 * @summary Get Projects
 */

export function useGetProjectsApiV1ProjectsGet<TData = Awaited<ReturnType<typeof Get_projects_api_v1_projects__get>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof Get_projects_api_v1_projects__get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetProjectsApiV1ProjectsGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a new project.

In production, this will:
1. Extract user ID from JWT token
2. Validate project data
3. Create project in database
4. Set up initial project resources
 * @summary Create Project
 */
export const Create_project_api_v1_projects__post = (
    projectCreate: ProjectCreate,
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<Project>(
      {url: `http://localhost:8000/api/v1/projects/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectCreate, signal
    },
      options);
    }
  


export const getCreateProjectApiV1ProjectsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Create_project_api_v1_projects__post>>, TError,{data: ProjectCreate}, TContext>, request?: SecondParameter<typeof mutator>}
): UseMutationOptions<Awaited<ReturnType<typeof Create_project_api_v1_projects__post>>, TError,{data: ProjectCreate}, TContext> => {

const mutationKey = ['createProjectApiV1ProjectsPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Create_project_api_v1_projects__post>>, {data: ProjectCreate}> = (props) => {
          const {data} = props ?? {};

          return  Create_project_api_v1_projects__post(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateProjectApiV1ProjectsPostMutationResult = NonNullable<Awaited<ReturnType<typeof Create_project_api_v1_projects__post>>>
    export type CreateProjectApiV1ProjectsPostMutationBody = ProjectCreate
    export type CreateProjectApiV1ProjectsPostMutationError = HTTPValidationError

    /**
 * @summary Create Project
 */
export const useCreateProjectApiV1ProjectsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Create_project_api_v1_projects__post>>, TError,{data: ProjectCreate}, TContext>, request?: SecondParameter<typeof mutator>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Create_project_api_v1_projects__post>>,
        TError,
        {data: ProjectCreate},
        TContext
      > => {

      const mutationOptions = getCreateProjectApiV1ProjectsPostMutationOptions(options);

      return useMutation(mutationOptions );
    }
    