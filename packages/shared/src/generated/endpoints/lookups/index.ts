/**
 * // üöÄ Auto-generated by Orval (Axios + React Query)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * // üîê Uses custom Axios instance with auth & error handling
 * 
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Barangay,
  GovernanceArea
} from '../../schemas';

import { mutator } from '../../../../../../apps/web/src/lib/api';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Retrieve all governance areas.
Accessible by all authenticated users.
 * @summary Get All Governance Areas
 */
export const getLookupsGovernanceAreas = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<GovernanceArea[]>(
      {url: `http://localhost:8000/api/v1/lookups/governance-areas`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLookupsGovernanceAreasQueryKey = () => {
    return [`http://localhost:8000/api/v1/lookups/governance-areas`] as const;
    }

    
export const getGetLookupsGovernanceAreasQueryOptions = <TData = Awaited<ReturnType<typeof getLookupsGovernanceAreas>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLookupsGovernanceAreas>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLookupsGovernanceAreasQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLookupsGovernanceAreas>>> = ({ signal }) => getLookupsGovernanceAreas(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLookupsGovernanceAreas>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLookupsGovernanceAreasQueryResult = NonNullable<Awaited<ReturnType<typeof getLookupsGovernanceAreas>>>
export type GetLookupsGovernanceAreasQueryError = unknown


/**
 * @summary Get All Governance Areas
 */

export function useGetLookupsGovernanceAreas<TData = Awaited<ReturnType<typeof getLookupsGovernanceAreas>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLookupsGovernanceAreas>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLookupsGovernanceAreasQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Retrieve all barangays.
Accessible by all authenticated users.
 * @summary Get All Barangays
 */
export const getLookupsBarangays = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<Barangay[]>(
      {url: `http://localhost:8000/api/v1/lookups/barangays`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLookupsBarangaysQueryKey = () => {
    return [`http://localhost:8000/api/v1/lookups/barangays`] as const;
    }

    
export const getGetLookupsBarangaysQueryOptions = <TData = Awaited<ReturnType<typeof getLookupsBarangays>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLookupsBarangays>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLookupsBarangaysQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLookupsBarangays>>> = ({ signal }) => getLookupsBarangays(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLookupsBarangays>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLookupsBarangaysQueryResult = NonNullable<Awaited<ReturnType<typeof getLookupsBarangays>>>
export type GetLookupsBarangaysQueryError = unknown


/**
 * @summary Get All Barangays
 */

export function useGetLookupsBarangays<TData = Awaited<ReturnType<typeof getLookupsBarangays>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLookupsBarangays>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetLookupsBarangaysQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



