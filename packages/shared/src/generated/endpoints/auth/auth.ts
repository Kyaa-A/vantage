/**
 * // üöÄ Auto-generated by Orval (Tag-Split Mode)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * 
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  AuthToken,
  HTTPValidationError,
  LoginRequest
} from '../../schemas';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Login
 */
export type LoginResponse200 = {
  data: AuthToken
  status: 200
}

export type LoginResponse422 = {
  data: HTTPValidationError
  status: 422
}
    
export type LoginResponseComposite = LoginResponse200 | LoginResponse422;
    
export type LoginResponse = LoginResponseComposite & {
  headers: Headers;
}

export const getLoginUrl = () => {


  

  return `http://localhost:8000/api/auth/login`
}

export const Login = async (loginRequest: LoginRequest, options?: RequestInit): Promise<LoginResponse> => {
  
  const res = await fetch(getLoginUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      loginRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: LoginResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as LoginResponse
}




export const getLoginMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Login>>, TError,{data: LoginRequest}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof Login>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['login'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Login>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  Login(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof Login>>>
    export type LoginMutationBody = LoginRequest
    export type LoginMutationError = HTTPValidationError

    /**
 * @summary Login
 */
export const useLogin = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Login>>, TError,{data: LoginRequest}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Login>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Logout
 */
export type LogoutResponse200 = {
  data: ApiResponse
  status: 200
}
    
export type LogoutResponseComposite = LogoutResponse200;
    
export type LogoutResponse = LogoutResponseComposite & {
  headers: Headers;
}

export const getLogoutUrl = () => {


  

  return `http://localhost:8000/api/auth/logout`
}

export const Logout = async ( options?: RequestInit): Promise<LogoutResponse> => {
  
  const res = await fetch(getLogoutUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: LogoutResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as LogoutResponse
}




export const getLogoutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Logout>>, TError,void, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof Logout>>, TError,void, TContext> => {

const mutationKey = ['logout'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof Logout>>, void> = () => {
          

          return  Logout(fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutMutationResult = NonNullable<Awaited<ReturnType<typeof Logout>>>
    
    export type LogoutMutationError = unknown

    /**
 * @summary Logout
 */
export const useLogout = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof Logout>>, TError,void, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof Logout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutMutationOptions(options);

      return useMutation(mutationOptions );
    }
    