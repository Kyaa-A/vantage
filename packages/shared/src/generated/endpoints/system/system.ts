/**
 * // üöÄ Auto-generated by Orval (Axios + React Query)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * // üîê Uses custom Axios instance with auth & error handling
 * 
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  HealthCheck
} from '../../schemas';

import { mutator } from '../../../../../../apps/web/src/lib/api';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Root
 */
export const GetRoot = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<ApiResponse>(
      {url: `http://localhost:8000/`, method: 'GET', signal
    },
      options);
    }
  

export const getGetRootQueryKey = () => {
    return [`http://localhost:8000/`] as const;
    }

    
export const getGetRootQueryOptions = <TData = Awaited<ReturnType<typeof GetRoot>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRootQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetRoot>>> = ({ signal }) => GetRoot(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRootQueryResult = NonNullable<Awaited<ReturnType<typeof GetRoot>>>
export type GetRootQueryError = unknown


/**
 * @summary Root
 */

export function useGetRoot<TData = Awaited<ReturnType<typeof GetRoot>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRootQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Health Check
 */
export const GetHealthCheck = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<HealthCheck>(
      {url: `http://localhost:8000/health`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHealthCheckQueryKey = () => {
    return [`http://localhost:8000/health`] as const;
    }

    
export const getGetHealthCheckQueryOptions = <TData = Awaited<ReturnType<typeof GetHealthCheck>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetHealthCheck>>> = ({ signal }) => GetHealthCheck(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData> & { queryKey: QueryKey }
}

export type GetHealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof GetHealthCheck>>>
export type GetHealthCheckQueryError = unknown


/**
 * @summary Health Check
 */

export function useGetHealthCheck<TData = Awaited<ReturnType<typeof GetHealthCheck>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetHealthCheckQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Hello
 */
export const GetHello = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<ApiResponse>(
      {url: `http://localhost:8000/api/hello`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHelloQueryKey = () => {
    return [`http://localhost:8000/api/hello`] as const;
    }

    
export const getGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof GetHello>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetHello>>> = ({ signal }) => GetHello(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData> & { queryKey: QueryKey }
}

export type GetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof GetHello>>>
export type GetHelloQueryError = unknown


/**
 * @summary Hello
 */

export function useGetHello<TData = Awaited<ReturnType<typeof GetHello>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetHelloQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



