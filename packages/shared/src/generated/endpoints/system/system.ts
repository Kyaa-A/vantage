/**
 * // üöÄ Auto-generated by Orval (Tag-Split Mode)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * 
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  HealthCheck
} from '../../schemas';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Root
 */
export type GetRootResponse200 = {
  data: ApiResponse
  status: 200
}
    
export type GetRootResponseComposite = GetRootResponse200;
    
export type GetRootResponse = GetRootResponseComposite & {
  headers: Headers;
}

export const getGetRootUrl = () => {


  

  return `http://localhost:8000/`
}

export const GetRoot = async ( options?: RequestInit): Promise<GetRootResponse> => {
  
  const res = await fetch(getGetRootUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRootResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetRootResponse
}



export const getGetRootQueryKey = () => {
    return [`http://localhost:8000/`] as const;
    }

    
export const getGetRootQueryOptions = <TData = Awaited<ReturnType<typeof GetRoot>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRootQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetRoot>>> = ({ signal }) => GetRoot({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRootQueryResult = NonNullable<Awaited<ReturnType<typeof GetRoot>>>
export type GetRootQueryError = unknown


/**
 * @summary Root
 */

export function useGetRoot<TData = Awaited<ReturnType<typeof GetRoot>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetRoot>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetRootQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Health Check
 */
export type GetHealthCheckResponse200 = {
  data: HealthCheck
  status: 200
}
    
export type GetHealthCheckResponseComposite = GetHealthCheckResponse200;
    
export type GetHealthCheckResponse = GetHealthCheckResponseComposite & {
  headers: Headers;
}

export const getGetHealthCheckUrl = () => {


  

  return `http://localhost:8000/health`
}

export const GetHealthCheck = async ( options?: RequestInit): Promise<GetHealthCheckResponse> => {
  
  const res = await fetch(getGetHealthCheckUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetHealthCheckResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetHealthCheckResponse
}



export const getGetHealthCheckQueryKey = () => {
    return [`http://localhost:8000/health`] as const;
    }

    
export const getGetHealthCheckQueryOptions = <TData = Awaited<ReturnType<typeof GetHealthCheck>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthCheckQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetHealthCheck>>> = ({ signal }) => GetHealthCheck({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData> & { queryKey: QueryKey }
}

export type GetHealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof GetHealthCheck>>>
export type GetHealthCheckQueryError = unknown


/**
 * @summary Health Check
 */

export function useGetHealthCheck<TData = Awaited<ReturnType<typeof GetHealthCheck>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHealthCheck>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetHealthCheckQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Hello
 */
export type GetHelloResponse200 = {
  data: ApiResponse
  status: 200
}
    
export type GetHelloResponseComposite = GetHelloResponse200;
    
export type GetHelloResponse = GetHelloResponseComposite & {
  headers: Headers;
}

export const getGetHelloUrl = () => {


  

  return `http://localhost:8000/api/hello`
}

export const GetHello = async ( options?: RequestInit): Promise<GetHelloResponse> => {
  
  const res = await fetch(getGetHelloUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetHelloResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as GetHelloResponse
}



export const getGetHelloQueryKey = () => {
    return [`http://localhost:8000/api/hello`] as const;
    }

    
export const getGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof GetHello>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof GetHello>>> = ({ signal }) => GetHello({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData> & { queryKey: QueryKey }
}

export type GetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof GetHello>>>
export type GetHelloQueryError = unknown


/**
 * @summary Hello
 */

export function useGetHello<TData = Awaited<ReturnType<typeof GetHello>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof GetHello>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetHelloQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



