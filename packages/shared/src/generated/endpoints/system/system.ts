/**
 * // üöÄ Auto-generated by Orval (Axios + React Query)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * // üîê Uses custom Axios instance with auth & error handling
 * 
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  HealthCheck
} from '../../schemas';

import { mutator } from '../../../../../../apps/web/src/lib/api';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Root endpoint - welcome message for the API.
 * @summary Root
 */
export const get = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<ApiResponse>(
      {url: `http://localhost:8000/api/v1/`, method: 'GET', signal
    },
      options);
    }
  

export const getGetQueryKey = () => {
    return [`http://localhost:8000/api/v1/`] as const;
    }

    
export const getGetQueryOptions = <TData = Awaited<ReturnType<typeof get>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({ signal }) => get(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData> & { queryKey: QueryKey }
}

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>
export type GetQueryError = unknown


/**
 * @summary Root
 */

export function useGet<TData = Awaited<ReturnType<typeof get>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Comprehensive health check endpoint.

Checks:
- API service status
- Database connectivity (SQLAlchemy + Supabase)
- Overall system health
 * @summary Health Check
 */
export const getHealth = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<HealthCheck>(
      {url: `http://localhost:8000/api/v1/health`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHealthQueryKey = () => {
    return [`http://localhost:8000/api/v1/health`] as const;
    }

    
export const getGetHealthQueryOptions = <TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) => getHealth(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData> & { queryKey: QueryKey }
}

export type GetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthQueryError = unknown


/**
 * @summary Health Check
 */

export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetHealthQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Detailed database connectivity status for debugging.

Returns detailed information about:
- PostgreSQL connection via SQLAlchemy
- Supabase connection and configuration
- Connection errors and troubleshooting info
 * @summary Database Status
 */
export const getDbStatus = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<unknown>(
      {url: `http://localhost:8000/api/v1/db-status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetDbStatusQueryKey = () => {
    return [`http://localhost:8000/api/v1/db-status`] as const;
    }

    
export const getGetDbStatusQueryOptions = <TData = Awaited<ReturnType<typeof getDbStatus>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDbStatus>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDbStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDbStatus>>> = ({ signal }) => getDbStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDbStatus>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDbStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getDbStatus>>>
export type GetDbStatusQueryError = unknown


/**
 * @summary Database Status
 */

export function useGetDbStatus<TData = Awaited<ReturnType<typeof getDbStatus>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDbStatus>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetDbStatusQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Simple hello endpoint for testing connectivity.
 * @summary Hello
 */
export const getHello = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<ApiResponse>(
      {url: `http://localhost:8000/api/v1/hello`, method: 'GET', signal
    },
      options);
    }
  

export const getGetHelloQueryKey = () => {
    return [`http://localhost:8000/api/v1/hello`] as const;
    }

    
export const getGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getHello>>> = ({ signal }) => getHello(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData> & { queryKey: QueryKey }
}

export type GetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof getHello>>>
export type GetHelloQueryError = unknown


/**
 * @summary Hello
 */

export function useGetHello<TData = Awaited<ReturnType<typeof getHello>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getHello>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetHelloQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



