/**
 * // üöÄ Auto-generated by Orval (Axios + React Query)
 * // üîÑ Do not edit manually - regenerate with: pnpm generate-types
 * // üìÅ Organized by FastAPI tags for maximum maintainability
 * // üîê Uses custom Axios instance with auth & error handling
 * 
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  HealthCheck
} from '../../schemas';

import { mutator } from '../../../../../../apps/web/src/lib/api';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Root endpoint - welcome message for the API.
 * @summary Root
 */
export const getSystem = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<ApiResponse>(
      {url: `http://localhost:8000/api/v1/system/`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSystemQueryKey = () => {
    return [`http://localhost:8000/api/v1/system/`] as const;
    }

    
export const getGetSystemQueryOptions = <TData = Awaited<ReturnType<typeof getSystem>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSystemQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystem>>> = ({ signal }) => getSystem(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSystemQueryResult = NonNullable<Awaited<ReturnType<typeof getSystem>>>
export type GetSystemQueryError = unknown


/**
 * @summary Root
 */

export function useGetSystem<TData = Awaited<ReturnType<typeof getSystem>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSystem>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetSystemQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Comprehensive health check endpoint.

Checks:
- API service status
- Database connectivity (SQLAlchemy + Supabase)
- Overall system health
 * @summary Health Check
 */
export const getSystemHealth = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<HealthCheck>(
      {url: `http://localhost:8000/api/v1/system/health`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSystemHealthQueryKey = () => {
    return [`http://localhost:8000/api/v1/system/health`] as const;
    }

    
export const getGetSystemHealthQueryOptions = <TData = Awaited<ReturnType<typeof getSystemHealth>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSystemHealth>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSystemHealthQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemHealth>>> = ({ signal }) => getSystemHealth(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSystemHealth>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSystemHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getSystemHealth>>>
export type GetSystemHealthQueryError = unknown


/**
 * @summary Health Check
 */

export function useGetSystemHealth<TData = Awaited<ReturnType<typeof getSystemHealth>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSystemHealth>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetSystemHealthQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Detailed database connectivity status for debugging.

Returns detailed information about:
- PostgreSQL connection via SQLAlchemy
- Supabase connection and configuration
- Connection errors and troubleshooting info
 * @summary Database Status
 */
export const getSystemDbStatus = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<unknown>(
      {url: `http://localhost:8000/api/v1/system/db-status`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSystemDbStatusQueryKey = () => {
    return [`http://localhost:8000/api/v1/system/db-status`] as const;
    }

    
export const getGetSystemDbStatusQueryOptions = <TData = Awaited<ReturnType<typeof getSystemDbStatus>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSystemDbStatus>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSystemDbStatusQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemDbStatus>>> = ({ signal }) => getSystemDbStatus(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSystemDbStatus>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSystemDbStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getSystemDbStatus>>>
export type GetSystemDbStatusQueryError = unknown


/**
 * @summary Database Status
 */

export function useGetSystemDbStatus<TData = Awaited<ReturnType<typeof getSystemDbStatus>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSystemDbStatus>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetSystemDbStatusQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Simple hello endpoint for testing connectivity.
 * @summary Hello
 */
export const getSystemHello = (
    
 options?: SecondParameter<typeof mutator>,signal?: AbortSignal
) => {
      
      
      return mutator<ApiResponse>(
      {url: `http://localhost:8000/api/v1/system/hello`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSystemHelloQueryKey = () => {
    return [`http://localhost:8000/api/v1/system/hello`] as const;
    }

    
export const getGetSystemHelloQueryOptions = <TData = Awaited<ReturnType<typeof getSystemHello>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSystemHello>>, TError, TData>, request?: SecondParameter<typeof mutator>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSystemHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSystemHello>>> = ({ signal }) => getSystemHello(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 300000, refetchOnWindowFocus: false,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSystemHello>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSystemHelloQueryResult = NonNullable<Awaited<ReturnType<typeof getSystemHello>>>
export type GetSystemHelloQueryError = unknown


/**
 * @summary Hello
 */

export function useGetSystemHello<TData = Awaited<ReturnType<typeof getSystemHello>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSystemHello>>, TError, TData>, request?: SecondParameter<typeof mutator>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetSystemHelloQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



