---
description: Guides the AI in creating a detailed, three-tier task list for a feature from a PRD with explicit PRD traceability and tech-stack alignment.
globs: ["docs/prds/prd-*.md"]
alwaysApply: false
---

# Rule: Generating a Three-Tier Feature Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, three-tier task list in Markdown format based on an existing Product Requirements Document (PRD). The task list uses Epic → Story → Atomic task hierarchy to ensure complete PRD traceability and tech-stack specificity for junior developers.

## Tech Stack Context

- **Monorepo:** Turborepo with pnpm workspaces
- **Backend:** Python with FastAPI, SQLAlchemy (ORM), Alembic (migrations), and Pydantic (schemas). Located in `apps/api`.
- **Frontend:** Next.js with App Router, TypeScript, Tailwind CSS, shadcn/ui (component library), and TanStack Query (server state). Located in `apps/web`.
- **Shared Code:** Auto-generated API client and TypeScript types via Orval from the backend's OpenAPI spec. Located in `packages/shared`.
- **Testing:** Pytest for backend unit/integration tests; Vitest/React Testing Library for frontend component tests.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md`

## Three-Tier Process

1.  **Receive PRD Reference:** User points to a specific PRD file
2.  **Analyze PRD:** Read and map functional requirements to implementation domains
3.  **Phase 1: Generate Epic Tasks** - Create file with high-level epics (3-5 epics) directly mapped to PRD functional requirements
4.  **Wait for Confirmation:** Pause for user approval with "Go"
5.  **Phase 2: Generate Story Tasks** - Break epics into tech-stack specific implementation areas (Frontend, API, Database, etc.)
6.  **Phase 3: Generate Atomic Tasks** - Create granular, file-specific tasks with explicit acceptance criteria
7.  **PRD Traceability Mapping** - Create explicit mapping between PRD requirements and tasks
8.  **Save Task List** - Save with complete three-tier structure

## Output Format

The generated task list _must_ follow this three-tier structure:

```markdown
## PRD Traceability Matrix

Map each functional requirement to specific tasks:

- **FR-01** User Registration → Epic 1.0
- **FR-02** Email Verification → Epic 2.0
- **FR-03** Profile Management → Epic 3.0

## Relevant Files

A user registration feature would involve these files:

- **Backend Model:** `apps/api/app/db/models/user.py`
- **Backend Schema:** `apps/api/app/schemas/user.py`
- **Backend Service:** `apps/api/app/services/user_service.py`
- **Backend API Route:** `apps/api/app/api/v1/users.py`
- **Database Migration:** `apps/api/alembic/versions/xxxxxxxxxxxx_add_user_registration_fields.py`
- **Frontend Page:** `apps/web/src/app/(auth)/register/page.tsx`
- **Frontend Component:** `apps/web/src/components/features/auth/RegisterForm.tsx`
- **Frontend Hook:** `apps/web/src/hooks/useUsers.ts`
- **Shared Types:** `packages/shared/src/generated/schemas/users/index.ts` (auto-generated)

### Testing Notes

- **Backend Testing:** Place Pytest tests in `apps/api/tests/`. Test services and API endpoints separately.
- **Frontend Testing:** Place component tests alongside the component (e.g., `RegisterForm.test.tsx`). Use Vitest and React Testing Library.
- **Type Safety:** Import auto-generated types from `@vantage/shared` to ensure frontend and backend are in sync.
- **Run Tests:** Use `pnpm test` from the root, which will run tests for all workspaces.

## Tasks

### Three-Tier Structure: Epic → Story → Atomic

- [ ] **1.0 Epic: User Registration System** _(FR-01)_

  - [ ] **1.1 Story: Backend Registration API**
    - [ ] **1.1.1 Atomic:** Update `User` model with `hashed_password`.
      - **Files:** `apps/api/app/db/models/user.py`
      - **Dependencies:** None
      - **Acceptance:** `User` model in SQLAlchemy includes a `hashed_password` string field.
      - **Tech:** SQLAlchemy ORM model definition.
    - [ ] **1.1.2 Atomic:** Create `UserCreate` Pydantic schema.
      - **Files:** `apps/api/app/schemas/user.py`
      - **Dependencies:** None
      - **Acceptance:** Schema includes `email`, `password` (plain text for input), `full_name`.
      - **Tech:** Pydantic `BaseModel`.
    - [ ] **1.1.3 Atomic:** Implement `create_user` method in `user_service`.
      - **Files:** `apps/api/app/services/user_service.py`
      - **Dependencies:** 1.1.1, 1.1.2. `core.security.get_password_hash` utility.
      - **Acceptance:** Service method accepts a `UserCreate` schema, hashes the password, creates a new `User` model instance, and saves it to the database.
      - **Tech:** SQLAlchemy session, Passlib for hashing.
    - [ ] **1.1.4 Atomic:** Create user registration endpoint.
      - **Files:** `apps/api/app/api/v1/users.py`
      - **Dependencies:** 1.1.3
      - **Acceptance:** A `POST /api/v1/users/` endpoint accepts `UserCreate` data, calls `user_service.create_user`, and returns the newly created user (using a `User` response schema). Handles duplicate email errors.
      - **Tech:** FastAPI APIRouter, dependency injection for DB session and services.
  - [ ] **1.2 Story: Database Migration**
    - [ ] **1.2.1 Atomic:** Generate and apply Alembic migration for User model changes.
      - **Files:** `apps/api/alembic/versions/`
      - **Dependencies:** 1.1.1
      - **Acceptance:** An Alembic migration script is generated and successfully applied to the database, creating the necessary schema changes.
      - **Tech:** `alembic revision --autogenerate`, `alembic upgrade head`.
  - [ ] **1.3 Story: Frontend Registration Interface**
    - [ ] **1.3.1 Atomic:** Create `RegisterForm.tsx` component.
      - **Files:** `apps/web/src/components/features/auth/RegisterForm.tsx`
      - **Dependencies:** `shadcn/ui` components (`Input`, `Button`, `Form`).
      - **Acceptance:** Form includes fields for full name, email, and password. Uses `react-hook-form` for state management and validation. Displays validation errors.
      - **Tech:** React, TypeScript, `react-hook-form`, `zod` for validation, `shadcn/ui`.
    - [ ] **1.3.2 Atomic:** Create `useRegisterUser` mutation hook.
      - **Files:** `apps/web/src/hooks/useUsers.ts`
      - **Dependencies:** `packages/shared` for API client functions.
      - **Acceptance:** A `useMutation` hook is created that calls the generated `users.usersCreateUser` API client function. It handles success and error states.
      - **Tech:** `@tanstack/react-query`, generated Orval client.
    - [ ] **1.3.3 Atomic:** Build registration page at `/register` route.
      - **Files:** `apps/web/src/app/(auth)/register/page.tsx`
      - **Dependencies:** 1.3.1, 1.3.2
      - **Acceptance:** Page renders the `RegisterForm`, uses the `useRegisterUser` hook for submission, and redirects to the login page on successful registration.
      - **Tech:** Next.js App Router, Server/Client components.

- [ ] **2.0 Epic: Email Verification System** _(FR-02)_
  - [ ] **2.1 Story: Verification Email Logic**
    - [ ] **2.1.1 Atomic:** [Detailed atomic task...]
  - [ ] **2.2 Story: Verification UI Components**
    - [ ] **2.2.1 Atomic:** [Detailed atomic task...]

## Task Specificity Requirements

### Epic Tasks (1.0, 2.0, 3.0...)

- **Scope:** Maps 1:1 with PRD functional requirements
- **Purpose:** High-level feature boundaries
- **Duration:** Multiple days to weeks
- **Example:** "User Authentication System" covering registration, login, logout

### Story Tasks (1.1, 1.2, 2.1, 2.2...)

- **Scope:** Tech-stack specific implementation domains
- **Purpose:** Logical grouping of related atomic tasks
- **Duration:** 1-3 days
- **Categories:** Frontend Components, API Endpoints, Database Schema, Utilities, Testing
- **Example:** "Frontend Registration Interface" containing all UI components for registration

### Atomic Tasks (1.1.1, 1.1.2, 1.2.1...)

- **Scope:** Single file or specific functionality
- **Purpose:** Immediately actionable work items
- **Duration:** 2-8 hours
- **Requirements:**
  - **Files:** Exact file paths to create/modify
  - **Dependencies:** What must be complete first
  - **Acceptance:** Specific, testable completion criteria
  - **Tech:** Specific technologies and patterns to use

## Quality Gates

### Epic Review Checklist

- [ ] All PRD functional requirements are covered
- [ ] No functional requirement spans multiple epics
- [ ] Epic titles clearly indicate the feature boundary

### Story Review Checklist

- [ ] Stories align with project's tech stack
- [ ] Each story represents a cohesive implementation domain
- [ ] Dependencies between stories are clearly identified
- [ ] Stories can be worked on by different developers simultaneously

### Atomic Review Checklist

- [ ] Task can be completed by a junior developer in 2-8 hours
- [ ] Specific file paths are provided
- [ ] Acceptance criteria are testable and specific
- [ ] Tech requirements specify exact tools/patterns from our stack
- [ ] Dependencies are clearly stated

## Interaction Model

**Three-Phase Generation:**

1. **Phase 1:** Generate epics only, wait for "Go" confirmation
2. **Phase 2:** Generate stories for each epic, wait for "Go" confirmation
3. **Phase 3:** Generate atomic tasks for each story

This staged approach ensures alignment at each level before adding complexity.

## Target Audience

Assume the primary reader is a **junior developer** who needs:

- Explicit file paths and structures
- Clear acceptance criteria for each task
- Specific tech stack guidance
- Obvious dependency ordering
- Testable completion conditions
```
