---
description: Guides the AI in creating a detailed, three-tier task list for a feature from a PRD with explicit PRD traceability and tech-stack alignment.
description: Guides the AI in creating a detailed, three-tier task list for a feature from a PRD with explicit PRD traceability and tech-stack alignment.
globs: ["docs/prds/prd-*.md"]
alwaysApply: false
---

# Rule: Generating a Three-Tier Feature Task List from a PRD

# Rule: Generating a Three-Tier Feature Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, three-tier task list in Markdown format based on an existing Product Requirements Document (PRD). The task list uses Epic → Story → Atomic task hierarchy to ensure complete PRD traceability and tech-stack specificity for junior developers.

## Tech Stack Context

- **Monorepo:** Turborepo with pnpm workspaces
- **Backend:** Python with FastAPI, SQLAlchemy (ORM), Alembic (migrations), and Pydantic (schemas). Located in `apps/api`.
- **Frontend:** Next.js with App Router, TypeScript, Tailwind CSS, shadcn/ui (component library), and TanStack Query (server state). Located in `apps/web`.
- **Shared Code:** Auto-generated API client and TypeScript types via Orval from the backend's OpenAPI spec. Located in `packages/shared`.
- **Testing:** Pytest for backend unit/integration tests; Vitest/React Testing Library for frontend component tests.

## Adherence to Project-Wide Rules

To ensure all generated tasks align with our project's architecture, they must follow our established development guidelines. The main index of all rules can be found at `@index.mdc`.

For example, when creating tasks, you should consider our specific conventions for things like:

- **Backend:** How we structure API endpoints (`@api-endpoint-creation.mdc`) and implement business logic (`@service-layer-pattern.mdc`).
- **Frontend:** How we build pages (`@page-structure.mdc`), create components (`@ui-components.mdc`), and manage data (`@hooks.mdc`).
- **Testing:** Our overall approach to writing tests (`@testing.mdc`).

Consulting these rules is essential for creating tasks that are consistent with our codebase.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md`

## Three-Tier Process

- **Filename:** `tasks-[prd-file-name].md`

## Three-Tier Process

1.  **Receive PRD Reference:** User points to a specific PRD file
2.  **Analyze PRD:** Read and map functional requirements to implementation domains
3.  **Phase 1: Generate Epic Tasks** - Create file with high-level epics (3-5 epics) directly mapped to PRD functional requirements
4.  **Wait for Confirmation:** Pause for user approval with "Go"
5.  **Phase 2: Generate Story Tasks** - Break epics into tech-stack specific implementation areas (Frontend, API, Database, etc.)
6.  **Phase 3: Generate Atomic Tasks** - Create granular, file-specific tasks with explicit acceptance criteria
7.  **PRD Traceability Mapping** - Create explicit mapping between PRD requirements and tasks
8.  **Save Task List** - Save with complete three-tier structure
9.  **Receive PRD Reference:** User points to a specific PRD file
10. **Analyze PRD:** Read and map functional requirements to implementation domains
11. **Phase 1: Generate Epic Tasks** - Create file with high-level epics (3-5 epics) directly mapped to PRD functional requirements
12. **Wait for Confirmation:** Pause for user approval with "Go"
13. **Phase 2: Generate Story Tasks** - Break epics into tech-stack specific implementation areas (Frontend, API, Database, etc.)
14. **Phase 3: Generate Atomic Tasks** - Create granular, file-specific tasks with explicit acceptance criteria
15. **PRD Traceability Mapping** - Create explicit mapping between PRD requirements and tasks
16. **Save Task List** - Save with complete three-tier structure

## Output Format

The generated task list _must_ follow this three-tier structure:
The generated task list _must_ follow this three-tier structure:

```markdown
## PRD Traceability Matrix

Map each functional requirement to specific tasks:

- **FR-01** User Registration → Epic 1.0
- **FR-02** Email Verification → Epic 2.0
- **FR-03** Profile Management → Epic 3.0

## PRD Traceability Matrix

Map each functional requirement to specific tasks:

- **FR-01** User Registration → Epic 1.0
- **FR-02** Email Verification → Epic 2.0
- **FR-03** Profile Management → Epic 3.0

## Relevant Files

A user registration feature would involve these files:

- **Backend Model:** `apps/api/app/db/models/user.py`
- **Backend Schema:** `apps/api/app/schemas/user.py`
- **Backend Service:** `apps/api/app/services/user_service.py`
- **Backend API Route:** `apps/api/app/api/v1/users.py`
- **Database Migration:** `apps/api/alembic/versions/xxxxxxxxxxxx_add_user_registration_fields.py`
- **Frontend Page:** `apps/web/src/app/(auth)/register/page.tsx`
- **Frontend Component:** `apps/web/src/components/features/auth/RegisterForm.tsx`
- **Frontend Hook:** `apps/web/src/hooks/useUsers.ts`
- **Shared Types:** `packages/shared/src/generated/schemas/users/index.ts` (auto-generated)

### Testing Notes

- **Backend Testing:** Place Pytest tests in `apps/api/tests/`. Test services and API endpoints separately.
- **Frontend Testing:** Place component tests alongside the component (e.g., `RegisterForm.test.tsx`). Use Vitest and React Testing Library.
- **Type Safety:** Import auto-generated types from `@vantage/shared` to ensure frontend and backend are in sync.
- **Run Tests:** Use `pnpm test` from the root, which will run tests for all workspaces.
  A user registration feature would involve these files:

- **Backend Model:** `apps/api/app/db/models/user.py`
- **Backend Schema:** `apps/api/app/schemas/user.py`
- **Backend Service:** `apps/api/app/services/user_service.py`
- **Backend API Route:** `apps/api/app/api/v1/users.py`
- **Database Migration:** `apps/api/alembic/versions/xxxxxxxxxxxx_add_user_registration_fields.py`
- **Frontend Page:** `apps/web/src/app/(auth)/register/page.tsx`
- **Frontend Component:** `apps/web/src/components/features/auth/RegisterForm.tsx`
- **Frontend Hook:** `apps/web/src/hooks/useUsers.ts`
- **Shared Types:** `packages/shared/src/generated/schemas/users/index.ts` (auto-generated)

### Testing Notes

- **Backend Testing:** Place Pytest tests in `apps/api/tests/`. Test services and API endpoints separately.
- **Frontend Testing:** Place component tests alongside the component (e.g., `RegisterForm.test.tsx`). Use Vitest and React Testing Library.
- **Type Safety:** Import auto-generated types from `@vantage/shared` to ensure frontend and backend are in sync.
- **Run Tests:** Use `pnpm test` from the root, which will run tests for all workspaces.

## Tasks

### Three-Tier Structure: Epic → Story → Atomic

- [ ] **1.0 Epic: User Registration System** _(FR-01)_

  - [ ] **1.1 Story: Backend Registration API**
    - [ ] **1.1.1 Atomic:** Update `User` model with `hashed_password`.
      - **Files:** `apps/api/app/db/models/user.py`
      - **Dependencies:** None
      - **Acceptance:** `User` model in SQLAlchemy includes a `hashed_password` string field.
      - **Tech:** SQLAlchemy ORM model definition.
    - [ ] **1.1.2 Atomic:** Create `UserCreate` Pydantic schema.
      - **Files:** `apps/api/app/schemas/user.py`
      - **Dependencies:** None
      - **Acceptance:** Schema includes `email`, `password` (plain text for input), `full_name`.
      - **Tech:** Pydantic `BaseModel`.
    - [ ] **1.1.3 Atomic:** Implement `create_user` method in `user_service`.
      - **Files:** `apps/api/app/services/user_service.py`
      - **Dependencies:** 1.1.1, 1.1.2. `core.security.get_password_hash` utility.
      - **Acceptance:** Service method accepts a `UserCreate`
```
