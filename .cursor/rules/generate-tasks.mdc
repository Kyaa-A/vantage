---
description: Guides the AI in creating a detailed, step-by-step task list for a VANTAGE feature from a PRD.
globs: ["docs/prds/prd-*.md"]
alwaysApply: false
---
---
description: This rule is triggered when a PRD is provided to generate a developer task list.
globs: ["tasks/tasks-*.md"]
alwaysApply: false
---
# Rule: Generating a VANTAGE Feature Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD) for the VANTAGE project. The task list should guide a developer through implementation, with testing instructions specific to our monorepo tech stack.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-core-user-authentication-and-management.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file (e.g., `@docs/prds/prd-core-user-authentication-and-management.md`).
2.  **Analyze PRD:** The AI reads and analyzes the functional requirements, user stories, and technical considerations of the specified PRD.
3.  **Phase 1: Generate Parent Tasks:** Based on the PRD analysis, create the file and generate the main, high-level tasks required to implement the feature. Use your judgement on how many high-level tasks to use. It's likely to be about 5-7. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the PRD. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the PRD.
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential files that will need to be created or modified across the monorepo. List these under the `Relevant Files` section, including corresponding test files with the correct naming conventions for our stack.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `tasks-[prd-file-name].md`.

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

-   `apps/api/app/schemas/new_schema.py` - Brief description (e.g., Pydantic schema for the new data model).
-   `apps/api/app/db/models/new_model.py` - Brief description (e.g., SQLAlchemy model for the database table).
-   `apps/api/app/api/v1/new_router.py` - Brief description (e.g., FastAPI router containing the new API endpoints).
-   `apps/api/tests/api/v1/test_new_router.py` - Backend unit/integration tests for the new API endpoints using `pytest`.
-   `apps/web/src/components/features/new-feature/NewComponent.tsx` - Brief description (e.g., Main React component for this feature).
-   `apps/web/src/components/features/new-feature/NewComponent.test.tsx` - Frontend unit tests for the React component using Jest and React Testing Library.

### Notes on Testing

-   **Backend Testing:** Unit tests for the Python backend are located in `apps/api/tests/`. To run them, navigate to the `apps/api` directory and execute `pytest`.
-   **Frontend Testing:** Unit tests for Next.js components are placed alongside the component files (e.g., `NewComponent.tsx` and `NewComponent.test.tsx` in the same folder). To run them, navigate to the `apps/web` directory and execute `pnpm test`.

## Tasks

-   [ ] 1.0 Parent Task Title (e.g., Setup Backend API Endpoints)
    -   [ ] 1.1 [Sub-task description 1.1]
    -   [ ] 1.2 [Sub-task description 1.2]
-   [ ] 2.0 Parent Task Title (e.g., Build Frontend UI Components)
    -   [ ] 2.1 [Sub-task description 2.1]
-   [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience


Assume the primary reader of the task list is a **junior developer** who will implement the feature.