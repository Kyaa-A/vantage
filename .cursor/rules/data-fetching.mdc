# Data Fetching Architecture

This document outlines the standard process for fetching and updating data in the VANTAGE frontend application. Our architecture is designed to be robust, type-safe, and maintainable, leveraging code generation and modern state management tools.

## Core Technologies

-   **TanStack Query (`@tanstack/react-query`):** The primary tool for managing server state, including caching, refetching, and mutations.
-   **Orval:** A tool that generates a type-safe API client and TypeScript schemas directly from our FastAPI backend's OpenAPI specification.
-   **`@vantage/shared` Package:** A local workspace package that contains the Orval-generated client. This is the **only** way the frontend should interact with the API.
-   **Axios:** The underlying HTTP client used by the generated API client. It is configured with interceptors to automatically handle authentication tokens.

## State Management Philosophy: Axios vs. TanStack Query vs. Zustand

In the VANTAGE web application, Axios, TanStack Query, and Zustand are used together to form a modern and robust state management stack. Each tool has a distinct and non-overlapping responsibility, creating a clear separation of concerns between transporting data, managing server state, and handling client state.

#### **1. Axios: The Transporter**
Axios's sole responsibility is to **make and receive HTTP requests**. It is the low-level "delivery truck" that communicates with our Python API. In VANTAGE, its most critical function is its **interceptor system**, which we use to automatically attach the user's JWT authentication token to every outgoing request and to globally handle API errors, such as redirecting to the login page on a `401 Unauthorized` response. It knows how to talk to the server, but it is completely unaware of React, component state, or caching.

#### **2. TanStack Query: The Server State Manager**
TanStack Query's responsibility is to **manage the lifecycle of server data** within the application. It acts as the intelligent "warehouse manager" for the data that Axios delivers. It decides when to fetch data, keeps it **cached** to make the UI feel instant, and automatically handles all the UI states associated with that data (e.g., `isLoading`, `isError`, `isSuccess`). Crucially, TanStack Query **uses** our configured Axios instance to perform the actual network request, but its primary job is managing the cache, not making the call itself.

#### **3. Zustand: The Client State Manager**
Zustand's responsibility is to manage **global state that is created and lives only on the client**. It is the application's "UI control panel" or short-term memory. It is used for data that has nothing to do with the server, such as tracking whether the sidebar is open, managing the state of a multi-step form, or storing the logged-in user's role and name *after* it has been fetched once. It does not handle data caching, API error states, or the lifecycle of data that originates from the server.

### **Summary of Differences**

| Tool | Primary Role | VANTAGE Use Case |
| :--- | :--- | :--- |
| **Axios** | API Communication Layer | Making the actual HTTP calls and attaching auth tokens. |
| **TanStack Query** | Server State Cache | Managing caching, loading, and error states for data from the API. |
| **Zustand** | Global Client State | Storing UI state (e.g., sidebar visibility) and user session data. |

## Data Flow

The standard data fetching flow follows these steps:

1.  **API Endpoint (Backend):** An endpoint is defined or updated in the FastAPI application (`apps/api`).
2.  **Code Generation (CLI):** The developer runs `pnpm generate` in the project root.
3.  **Client Update (`@vantage/shared`):** Orval introspects the new OpenAPI spec and updates the TypeScript functions and schemas in the `packages/shared/src/generated` directory.
4.  **Data Hook (`apps/web`):** A custom hook using `useQuery` or `useMutation` is created in `apps/web/src/hooks/`.
5.  **Hook Logic:** The hook's `queryFn` or `mutationFn` calls the relevant, type-safe function from the `@vantage/shared` package.
6.  **Component (`apps/web`):** A React component consumes the hook to access data, loading states, and error states.

**Under no circumstances should you use `axios` directly from a component or hook.** Always use the generated client from `@vantage/shared`.

## Using Generated Hooks (Recommended)

Thanks to Orval's `react-query` client generation, the most direct and recommended way to interact with the API is to use the hooks generated in the `@vantage/shared` package. This significantly reduces boilerplate code.

### Example: Fetching and Updating the Current User

Hereâ€™s how you would fetch the current user's data and provide a form to update their name in a component.

```tsx
// apps/web/src/components/features/profile/ProfileCard.tsx
'use client';

import { 
  useGetCurrentUserApiV1UsersMeGet, 
  useUpdateCurrentUserApiV1UsersMePut 
} from '@vantage/shared/generated/endpoints/users/users';
import { UserUpdate } from '@vantage/shared/generated/schemas';

export function ProfileCard() {
  // 1. Fetch data using the auto-generated query hook
  const { data: user, isLoading, error } = useGetCurrentUserApiV1UsersMeGet();

  // 2. Use the auto-generated mutation hook
  const updateUserMutation = useUpdateCurrentUserApiV1UsersMePut();

  const handleUpdateName = (newName: string) => {
    const updatedUserData: UserUpdate = { name: newName };
    
    updateUserMutation.mutate(
      { data: updatedUserData },
      {
        onSuccess: () => {
          // Optionally, invalidate the user query to refetch the data
          // Note: React Query will often auto-refetch on mutation success
          console.log('User updated successfully!');
        },
      }
    );
  };

  if (isLoading) return <div>Loading profile...</div>;
  if (error) return <div>Error loading profile.</div>;

  return (
    <div>
      <h1>Welcome, {user?.name}</h1>
      <p>Email: {user?.email}</p>
      {/* Example form to trigger the mutation */}
    </div>
  );
}
```

## When to Create Custom Hooks

While using generated hooks is the primary approach, you should still create custom hooks in `apps/web/src/hooks/` for the following scenarios:

-   **Complex Logic:** When you need to combine multiple API calls or add significant client-side logic before or after the data fetch.
-   **Encapsulation:** To provide a simpler, more domain-specific API to your components (e.g., `useProjects()` is more readable than `useGetProjectsApiV1ProjectsGet()`).
-   **Reusability:** If you find yourself repeatedly passing the same options (like `select` or `enabled`) to a generated hook across multiple components.

The examples below in "How to Fetch Data" and "How to Mutate Data" demonstrate this custom hook pattern.

## How to Fetch Data (`useQuery`)

### Step 1: Create a Data-Fetching Hook

Create a hook that encapsulates the query logic, including the query key and the query function.

```typescript
// apps/web/src/hooks/useProjects.ts
import { useQuery } from '@tanstack/react-query';
import { projects } from '@vantage/shared'; // 1. Import from the generated client

// 2. Define a structured query key
const projectKeys = {
  all: ['projects'] as const,
  lists: () => [...projectKeys.all, 'list'] as const,
  detail: (id: string) => [...projectKeys.all, 'detail', id] as const,
};

// 3. Create the hook
export function useProjects() {
  return useQuery({
    queryKey: projectKeys.lists(),
    queryFn: projects.projectsListProjects, // 4. Call the generated function
  });
}

export function useProject(id: string) {
  return useQuery({
    queryKey: projectKeys.detail(id),
    queryFn: () => projects.projectsReadProject({ projectId: id }),
    enabled: !!id,
  });
}
```

### Step 2: Use the Hook in a Component

```tsx
// apps/web/src/app/(app)/dashboard/page.tsx
'use client';

import { useProjects } from '@/hooks/useProjects';

export default function DashboardPage() {
  const { data: projects, isLoading, error } = useProjects();

  if (isLoading) {
    return <div>Loading projects...</div>;
  }

  if (error) {
    return <div>An error occurred: {error.message}</div>;
  }

  return (
    <ul>
      {projects?.data.map((project) => (
        <li key={project.id}>{project.name}</li>
      ))}
    </ul>
  );
}
```

## How to Mutate Data (`useMutation`)

Mutations (Create, Update, Delete) follow a similar pattern, using `useMutation` and invalidating queries on success to keep the UI in sync.

```typescript
// apps/web/src/hooks/useProjects.ts
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { projects, ProjectCreate } from '@vantage/shared';
import { projectKeys } from './useProjects';

export function useCreateProject() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (newProject: ProjectCreate) =>
      projects.projectsCreateProject({ requestBody: newProject }),

    onSuccess: () => {
      // Invalidate the query for the list of projects to trigger a refetch
      queryClient.invalidateQueries({ queryKey: projectKeys.lists() });
    },
  });
}
```

Remember to always regenerate the client after any backend API changes by running `pnpm generate`.