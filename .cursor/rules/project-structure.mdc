---
description: "High-level overview of the monorepo structure, 
detailing the backend, frontend, and shared packages."
globs: ["**/*"]
alwaysApply: true
---
# Project Structure

## Main Structure

- We use Turborepo with pnpm workspaces
- Backend API is in `apps/api` (Python FastAPI)
- Frontend web app is in `apps/web` (Next.js)
- Shared types are generated in `packages/shared`
- Documentation is in `docs/` folder

```tree
vantage
├── apps
│   ├── api
│   │   ├── alembic
│   │   │   ├── versions
│   │   │   │   ├── 10d9f89f28ac_add_relationship_between_users_and_.py
│   │   │   │   ├── 52cc77e65cc7_refactor_role_and_area_type_to_string_.py
│   │   │   │   ├── 5f9b4e3b7a2d_add_user_fields_and_barangay_table.py
│   │   │   │   ├── aa3c5f2149a5_add_check_constraints_for_enum_values.py
│   │   │   │   └── f73bc5ceb696_alter_user_table_and_add_governance_.py
│   │   │   ├── README
│   │   │   ├── env.py
│   │   │   └── script.py.mako
│   │   ├── app
│   │   │   ├── api
│   │   │   │   ├── v1
│   │   │   │   │   ├── __init__.py
│   │   │   │   │   ├── auth.py
│   │   │   │   │   ├── reports.py
│   │   │   │   │   ├── system.py
│   │   │   │   │   └── users.py
│   │   │   │   ├── __init__.py
│   │   │   │   └── deps.py
│   │   │   ├── core
│   │   │   │   ├── __init__.py
│   │   │   │   ├── config.py
│   │   │   │   └── security.py
│   │   │   ├── db
│   │   │   │   ├── models
│   │   │   │   │   ├── __init__.py
│   │   │   │   │   ├── auth.py
│   │   │   │   │   ├── barangay.py
│   │   │   │   │   ├── base.py
│   │   │   │   │   ├── governance_area.py
│   │   │   │   │   ├── system.py
│   │   │   │   │   └── user.py
│   │   │   │   ├── __init__.py
│   │   │   │   ├── base.py
│   │   │   │   └── enums.py
│   │   │   ├── schemas
│   │   │   │   ├── __init__.py
│   │   │   │   ├── system.py
│   │   │   │   ├── token.py
│   │   │   │   └── user.py
│   │   │   ├── services
│   │   │   │   ├── __init__.py
│   │   │   │   ├── governance_area_service.py
│   │   │   │   ├── startup_service.py
│   │   │   │   └── user_service.py
│   │   │   └── workers
│   │   │       ├── __init__.py
│   │   │       └── sglgb_classifier.py
│   │   ├── tests
│   │   │   ├── conftest.py
│   │   │   └── test_health.py
│   │   ├── README.md
│   │   ├── alembic.ini
│   │   ├── main.py
│   │   ├── package.json
│   │   ├── pyproject.toml
│   │   ├── pytest.ini
│   │   ├── test.db
│   │   └── uv.lock
│   └── web
│       ├── public
│       │   ├── file.svg
│       │   ├── globe.svg
│       │   ├── vercel.svg
│       │   └── window.svg
│       ├── src
│       │   ├── app
│       │   │   ├── (app)
│       │   │   │   ├── assessments
│       │   │   │   │   ├── [id]
│       │   │   │   │   │   └── page.tsx
│       │   │   │   │   └── page.tsx
│       │   │   │   ├── dashboard
│       │   │   │   │   └── page.tsx
│       │   │   │   ├── reports
│       │   │   │   │   └── page.tsx
│       │   │   │   ├── user-management
│       │   │   │   │   └── page.tsx
│       │   │   │   └── layout.tsx
│       │   │   ├── (auth)
│       │   │   │   ├── login
│       │   │   │   │   └── page.tsx
│       │   │   │   └── layout.tsx
│       │   │   ├── favicon.ico
│       │   │   ├── globals.css
│       │   │   ├── layout.tsx
│       │   │   └── page.tsx
│       │   ├── components
│       │   │   ├── features
│       │   │   │   ├── assessments
│       │   │   │   │   ├── PeaceAndOrderForm.tsx
│       │   │   │   │   └── index.ts
│       │   │   │   ├── auth
│       │   │   │   │   ├── LoginForm.tsx
│       │   │   │   │   └── index.ts
│       │   │   │   ├── users
│       │   │   │   │   ├── UserForm.tsx
│       │   │   │   │   ├── UserListSection.tsx
│       │   │   │   │   ├── UserManagementTable.tsx
│       │   │   │   │   └── index.ts
│       │   │   │   └── index.ts
│       │   │   ├── shared
│       │   │   │   ├── DataTable.tsx
│       │   │   │   ├── FileUploader.tsx
│       │   │   │   ├── PageHeader.tsx
│       │   │   │   ├── UserNav.tsx
│       │   │   │   └── index.ts
│       │   │   └── ui
│       │   │       ├── button.tsx
│       │   │       ├── dialog.tsx
│       │   │       ├── input.tsx
│       │   │       ├── label.tsx
│       │   │       ├── table.tsx
│       │   │       └── textarea.tsx
│       │   ├── constants
│       │   │   └── placeholder.ts
│       │   ├── hooks
│       │   │   └── useUsers.ts
│       │   ├── lib
│       │   │   ├── api.ts
│       │   │   └── utils.ts
│       │   ├── providers
│       │   │   └── index.tsx
│       │   ├── store
│       │   │   └── useAuthStore.ts
│       │   └── types
│       │       └── placeholder.ts
│       ├── README.md
│       ├── components.json
│       ├── eslint.config.mjs
│       ├── middleware.ts
│       ├── package.json
│       ├── postcss.config.mjs
│       └── tsconfig.json
├── docs
│   ├── prds
│   │   └── prd-core-user-authentication-and-management.md
│   ├── architecture.md
│   ├── decisions.md
│   └── project-roadmap.md
├── packages
│   └── shared
│       ├── src
│       │   └── generated
│       │       ├── endpoints
│       │       │   ├── auth
│       │       │   │   └── index.ts
│       │       │   ├── default
│       │       │   │   └── index.ts
│       │       │   ├── system
│       │       │   │   └── index.ts
│       │       │   ├── users
│       │       │   │   └── index.ts
│       │       │   └── index.ts
│       │       ├── schemas
│       │       │   ├── auth
│       │       │   │   └── index.ts
│       │       │   ├── common
│       │       │   │   └── index.ts
│       │       │   ├── error
│       │       │   │   └── index.ts
│       │       │   ├── system
│       │       │   │   └── index.ts
│       │       │   ├── users
│       │       │   │   └── index.ts
│       │       │   └── index.ts
│       │       └── index.ts
│       ├── package.json
│       └── tsconfig.json
├── scripts
│   ├── generate-types.js
│   └── watch-generate.js
├── tasks
│   └── tasks-prd-core-user-authentication-and-management.md
├── README.md
├── orval.config.ts
├── package.json
├── pnpm-lock.yaml
├── pnpm-workspace.yaml
└── turbo.json
```

## Backend (Python FastAPI)

### API Structure
- All API routes are in `apps/api/app/api/v1/`
- Each domain has its own route file (auth, users, projects, assessments, etc.)
- Use FastAPI dependency injection via `deps.py`
- Follow RESTful conventions for endpoint naming

### Database Models
- SQLAlchemy models are in `apps/api/app/db/models/`
- Each domain has its own model file
- All models inherit from `Base` class in `base.py`
- Use Alembic for database migrations

### Schemas
- Pydantic schemas are in `apps/api/app/schemas/`
- Separate request/response schemas when needed
- Use type hints for better IDE support

### Services
- Business logic goes in `apps/api/app/services/`
- Keep controllers thin, services fat
- Services handle complex business operations

## Frontend (Next.js)

### Page Structure
- Use Next.js App Router in `apps/web/src/app/`
- Group related routes with route groups: `(app)` and `(auth)`
- Pages are Server Components by default
- Use `page.tsx` for page components, `layout.tsx` for layouts

### Component Organization
- **Feature components**: `components/features/[domain]/` - Domain-specific components
- **Shared components**: `components/shared/` - Reusable across features
- **UI components**: `components/ui/` - Shadcn UI components
- Use PascalCase for component file names
- Export components from `index.ts` files

### File Naming Conventions
- Use kebab-case for route directories (`assessment-details`)
- Use PascalCase for component files (`AssessmentForm.tsx`)
- Use camelCase for utility files (`apiClient.ts`)
- Use lowercase for configuration files (`next.config.ts`)

## Shared Package

### Generated Code
- API client is auto-generated using Orval
- Types and schemas are generated from OpenAPI spec
- Never edit generated files directly
- Run `pnpm generate` to regenerate after API changes

### Type Safety
- Import types from `@vantage/shared` package
- API client functions are also imported from `@vantage/shared` (e.g., `import { users } from '@vantage/shared'`).
- Use generated schemas for form validation
- Leverage TypeScript for compile-time type checking

## Development Workflow

### Adding New Features
1. **Backend**: Create model → schema → route → service
2. **Frontend**: Create page → components → integrate API
3. **Generate types**: Run `pnpm generate` after API changes

### File Creation Guidelines
- Create new API endpoints in appropriate domain files
- Add new pages in `(app)` or `(auth)` route groups
- Place feature-specific components in `features/[domain]/`
- Add shared utilities to `lib/` or `hooks/`

### Testing Structure
- Backend tests in `apps/api/tests/`
- Frontend tests can be added alongside components
- Use Vitest for testing (configured in the project)

## Configuration Files

- **Root**: `turbo.json`, `pnpm-workspace.yaml`, `orval.config.ts`
- **Backend**: `pyproject.toml`, `alembic.ini`, `main.py`
- **Frontend**: `next.config.ts`, `tailwind.config.ts`, `components.json`
- **Shared**: Individual `package.json` and `tsconfig.json` files

## Best Practices

1. **Monorepo**: Use workspace references for cross-package dependencies
2. **Type Safety**: Leverage generated types from shared package
3. **API Integration**: Use generated API client functions
4. **Component Structure**: Organize by feature, then by type
5. **Database**: Use migrations for all schema changes
6. **Environment**: Separate configs for dev/staging/production


