# Frontend Form Handling

This document outlines the standard architecture for creating, validating, and submitting forms in the VANTAGE frontend. A consistent approach is essential for a robust and user-friendly experience.

## Core Technologies

-   **React Hook Form:** The primary library for managing form state, inputs, and validation logic. It's efficient and integrates well with our component library.
-   **Zod:** Used to define validation schemas. It provides type-safe validation that can be inferred directly into TypeScript types, complementing our Orval-generated schemas.
-   **`@tanstack/react-query` (`useMutation`):** Used to handle the submission of form data to the backend, providing clear states for loading, success, and error.
-   **`shadcn/ui` Components:** Our form inputs (`Input`, `Select`, etc.) and `Button` are based on `shadcn/ui` and are designed to integrate with React Hook Form.

## The Form Creation Pattern

Creating a form generally follows these steps:

1.  **Define a Schema:** Create a Zod schema to define the shape and validation rules for your form data. This schema should align with the Pydantic schema on the backend and the generated Orval type from `@vantage/shared`.
2.  **Create a Form Component:** Build a client component (`'use client'`) for the form.
3.  **Instantiate the Hook:** Use the `useForm` hook from `react-hook-form`, passing the Zod schema to the `resolver`.
4.  **Handle Submission:** Create a `useMutation` hook to handle the API call. The `onSubmit` function provided by `useForm` will call the mutation.
5.  **Build the UI:** Connect the form inputs to React Hook Form using the `register` method or the `<Controller>` component for more complex inputs.

## Example: A Project Creation Form

### Step 1: Define the Zod Schema

The schema ensures type safety and provides validation logic.

```typescript
// apps/web/src/components/features/projects/ProjectCreateForm.tsx
import { z } from 'zod';
import { ProjectCreate } from '@vantage/shared'; // Orval-generated type

// Create a Zod schema that matches the backend's expected input.
// This provides client-side validation before the API call.
export const projectCreateSchema = z.object({
  name: z.string().min(3, "Project name must be at least 3 characters long."),
  description: z.string().optional(),
});

// Infer the type for use in the component
type ProjectCreateFormValues = z.infer<typeof projectCreateSchema>;
```

### Step 2: Build the Form Component

This component integrates `useForm` for state management and `useMutation` for submission.

```tsx
// apps/web/src/components/features/projects/ProjectCreateForm.tsx
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'; // Assuming you have a reusable Form component from shadcn
import { useCreateProject } from '@/hooks/useProjects'; // Assumes a mutation hook exists

// Schema from Step 1
const projectCreateSchema = z.object({
  name: z.string().min(3, "Project name must be at least 3 characters long."),
  description: z.string().optional(),
});

type ProjectCreateFormValues = z.infer<typeof projectCreateSchema>;

export function ProjectCreateForm() {
  const createProjectMutation = useCreateProject();

  const form = useForm<ProjectCreateFormValues>({
    resolver: zodResolver(projectCreateSchema),
    defaultValues: {
      name: '',
      description: '',
    },
  });

  const onSubmit = (values: ProjectCreateFormValues) => {
    createProjectMutation.mutate(values);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Project Name</FormLabel>
              <FormControl>
                <Input placeholder="My new project" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" isLoading={createProjectMutation.isPending}>
          Create Project
        </Button>
      </form>
    </Form>
  );
}
```

### Best Practices

-   **Keep it Type-Safe:** Always infer your form value types from your Zod schema.
-   **Use the `Form` Component:** Leverage the reusable `Form` components from `shadcn/ui` (you may need to add them) to handle `FormItem`, `FormLabel`, `FormControl`, and `FormMessage` for consistent layout and error display.
-   **Handle Server Errors:** Use the `onError` callback in `useMutation` to set form errors returned from the API, providing a seamless user experience.
description:
globs:
alwaysApply: false
---
