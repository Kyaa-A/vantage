"""Refactor role and area_type to string enums

Revision ID: 52cc77e65cc7
Revises: aa3c5f2149a5
Create Date: 2025-07-19 19:55:40.086750

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from app.db.enums import UserRole, AreaType


# revision identifiers, used by Alembic.
revision: str = '52cc77e65cc7'
down_revision: Union[str, Sequence[str], None] = 'aa3c5f2149a5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Drop the old integer-based CHECK constraints
    op.execute("ALTER TABLE users DROP CONSTRAINT IF EXISTS check_user_role")
    op.execute("ALTER TABLE governance_areas DROP CONSTRAINT IF EXISTS check_governance_area_type")

    # Step 2: Alter columns to a temporary VARCHAR type
    op.alter_column('users', 'role',
               existing_type=sa.SMALLINT(),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('governance_areas', 'area_type',
               existing_type=sa.SMALLINT(),
               type_=sa.String(length=50),
               existing_nullable=False)

    # Step 3: Update the data from integers to new string values
    op.execute(f"UPDATE users SET role = CASE "
               f"WHEN role = '1' THEN '{UserRole.BLGU_USER.value}' "
               f"WHEN role = '2' THEN '{UserRole.AREA_ASSESSOR.value}' "
               f"WHEN role = '3' THEN '{UserRole.SUPERADMIN.value}' "
               f"ELSE '{UserRole.BLGU_USER.value}' END")
    
    op.execute(f"UPDATE governance_areas SET area_type = CASE "
               f"WHEN area_type = '1' THEN 'Core' "
               f"WHEN area_type = '2' THEN 'Essential' "
               f"ELSE 'Core' END")

    # Step 4: Create the new ENUM types in PostgreSQL
    op.execute("CREATE TYPE user_role_enum AS ENUM ('SUPERADMIN', 'MLGOO_DILG', 'AREA_ASSESSOR', 'BLGU_USER')")
    op.execute("CREATE TYPE area_type_enum AS ENUM ('Core', 'Essential')")
    
    # Step 5: Alter the columns to use the new ENUM types
    op.execute("ALTER TABLE users ALTER COLUMN role DROP DEFAULT")
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE user_role_enum USING role::user_role_enum")
    op.execute("ALTER TABLE users ALTER COLUMN role SET DEFAULT 'BLGU_USER'")
    
    op.execute("ALTER TABLE governance_areas ALTER COLUMN area_type TYPE area_type_enum USING area_type::area_type_enum")

    # ### end Alembic commands


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # To downgrade, we'll convert back to integers.
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE VARCHAR(50)")
    op.execute("ALTER TABLE governance_areas ALTER COLUMN area_type TYPE VARCHAR(50)")
               
    # Downgrade data from strings to integers
    op.execute("UPDATE users SET role = CASE "
               "WHEN role = 'BLGU_USER' THEN '1' "
               "WHEN role = 'AREA_ASSESSOR' THEN '2' "
               "WHEN role = 'SUPERADMIN' THEN '3' "
               "ELSE '1' END")
               
    op.execute("UPDATE governance_areas SET area_type = CASE "
               "WHEN area_type = 'Core' THEN '1' "
               "WHEN area_type = 'Essential' THEN '2' "
               "ELSE '1' END")

    # Alter columns back to SMALLINT
    op.execute("ALTER TABLE users ALTER COLUMN role TYPE SMALLINT USING role::integer")
    op.execute("ALTER TABLE governance_areas ALTER COLUMN area_type TYPE SMALLINT USING area_type::integer")

    # Drop the ENUM types from the database
    op.execute("DROP TYPE user_role_enum")
    op.execute("DROP TYPE area_type_enum")

    # Re-add the old integer-based CHECK constraints
    op.execute("ALTER TABLE users ADD CONSTRAINT check_user_role CHECK (role IN (1, 2, 3))")
    op.execute("ALTER TABLE governance_areas ADD CONSTRAINT check_governance_area_type CHECK (area_type IN (1, 2))")

    # ### end Alembic commands ###
