import { defineConfig } from 'orval';

export default defineConfig({
  vantage: {
    input: {
      target: 'http://localhost:8000/openapi.json',
    },
    output: {
      // 🎯 Professional scaling approach: Split by FastAPI tags automatically!
      // This creates organized folders based on your FastAPI route tags
      mode: 'tags-split',
      
      // 📁 API endpoints will be organized by tag in subfolders
      target: 'packages/shared/src/generated/endpoints',
      
      // 📝 Schemas (types) get their own dedicated folder  
      schemas: 'packages/shared/src/generated/schemas',
      
      client: 'react-query',
      baseUrl: 'http://localhost:8000',
      
      override: {
        // 🔧 Use our custom Axios instance with authentication & error handling
        mutator: {
          path: './apps/web/src/lib/api.ts',
          name: 'mutator', // Use named export instead of default
        },
        query: {
          useQuery: true,
          useMutation: true,
          useInfinite: false,
          options: {
            staleTime: 5 * 60 * 1000, // 5 minutes
            refetchOnWindowFocus: false,
          },
        },
        operationName: (operation, route, verb) => {
          // Replace /api/v1 prefix and slashes
          const path = route.replace('/api/v1', '').replace(/[\/{}]/g, ' ');
          const toCamelCase = (str: string) =>
            str.replace(/[-_]([a-z])/g, (g) => g[1].toUpperCase());

          // Split into parts and format
          const parts = path.split(' ').filter(Boolean);
          const operationId = parts
            .map(toCamelCase)
            .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
            .join('');
          
          return `${verb}${operationId}`;
        },
        header: () => [
          '// 🚀 Auto-generated by Orval (Axios + React Query)',
          '// 🔄 Do not edit manually - regenerate with: pnpm generate-types',
          '// 📁 Organized by FastAPI tags for maximum maintainability',
          '// 🔐 Uses custom Axios instance with auth & error handling',
          '',
        ],
      },
    },
  },
}); 